#include "xil_printf.h"
#include "sleep.h"
#include "game.h"

#define CHECK_MSEC 7 //Read if button pressed every 5msec
#define PRESS_MSEC 10 //Stable time before registering pressed
#define RELEASE_MSEC 100 //Stable time before  registering released

int main()
{


	InitGame();
    while(1)
    {
    	ShowTime();
    	PadsRead();

    	/*after 1 minute for now - when the game will be over
    	 * we set up appropriate the time in the definition*/
    	if(asTimeStruct.MinutesLSB == (TIME_TO_DRAW+1) && InfoFlag == 0){
    			ShowTheInfo(remis);
    	}
    	else{
    		if(InfoFlag==1){
    			InitGame();
    			InfoFlag=0;
    		}

    		/* DEBOUNCING REALASED BASED ON http://www.ganssle.com/debouncing-pt2.htm
    		 * Service routine called every CHECK_MSEC to
    		 * debounce both edges
    		 */
    	if(asTimeStruct.MiliSeconds%CHECK_MSEC == 0){
    			static uint8_t Count = RELEASE_MSEC / CHECK_MSEC;
    			uint8_t RawState;
    			KeyChanged = 0;
    			KeyPressed = DebouncedKeyPress;
    			RawState = ChangePlayersPosition();
    			if(RawState == DebouncedKeyPress){
    				//Set the timer which allow a change from the current state
    				if(DebouncedKeyPress) Count = RELEASE_MSEC/CHECK_MSEC;
    				else 				  Count = PRESS_MSEC/CHECK_MSEC;
    			}
    			else{
    				//Key has changed - wait for new state to become stable.
    				if(--Count == 0){
    					//Timer expired - accept the change
    					DebouncedKeyPress = RawState;
    					KeyChanged = 1;
    					KeyPressed = DebouncedKeyPress;
    					//And reset the timer
    					if(DebouncedKeyPress) Count = RELEASE_MSEC / CHECK_MSEC;
    					else                  Count = PRESS_MSEC  /  CHECK_MSEC;
    				}
    			}

    	}
    		refreshSprites();
    		usleep(20000);

    	}

    }

    return 0;
}
